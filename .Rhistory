setwd("~/Graphical Visualisation/Shiny package/ShinyG")
library(shiny)
source("server.R")
source("ui.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(list(
ui = pageWithSidebar(
headerPanel("Test"),
sidebarPanel(
tags$head(tags$style(type="text/css", "
#loadmessage {
position: fixed;
top: 0px;
left: 0px;
width: 100%;
padding: 5px 0px 5px 0px;
text-align: center;
font-weight: bold;
font-size: 100%;
color: #000000;
background-color: #CCFF66;
z-index: 105;
}
")),
numericInput('n', 'Number of obs', 100),
conditionalPanel(condition="$('html').hasClass('shiny-busy')",
tags$div("Loading...",id="loadmessage"))
),
mainPanel(plotOutput('plot'))
),
server = function(input, output) {
output$plot <- renderPlot({ Sys.sleep(2); hist(runif(input$n)) })
}
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("selectInput('Region:','region',c('Europe','Africa'))")
runApp()
runApp()
runApp()
load("C:/Users/edvinas.drevinskas/Documents/Graphical Visualisation/Shiny package/ShinyG/EMI base.Rdata")
runApp()
View(allcountries)
View(core)
View(region.coords)
View(region.coords.primary)
View(regions)
paste("fluidRow(selectInput('region','Region:',c("paste("'",unique(regions$Region),"'",sep="",collapse=","),"))")
paste("fluidRow(selectInput('region','Region:',c(",paste("'",unique(regions$Region),"'",sep="",collapse=","),"))")
runApp()
Duomenys <- read.csv("new.csv")
View(Duomenys)
DataSlidersFor <- c("CountryName","ProductName")
DSli <- colnames(Duomenys)[colnames(Duomenys)%in%DataSlidersFor]
DataPlot <- subset("Doumenys",CountryName%in%c("Lithuania","Estonia","Latvia"))
View(Duomenys)
DataPlot <- subset(Doumenys,CountryName%in%c("Lithuania","Estonia","Latvia"))
DataPlot <- subset(Duomenys,CountryName%in%c("Lithuania","Estonia","Latvia"))
View(DataPlot)
toplot <- DataPlot[,grep("Y",colnames(DataPlot))]
toplot <- toplot[,!is.na(toplot[])]
dd<- data.frame(x=as.numeric(gsub("Y","",colnames(toplot))),
y = as.numeric(toplot) )
textas <- paste(textas,")")
eval(parse(text=textas))
toplot <- DataPlot[,grep("Y",colnames(DataPlot))]
toplot <- toplot[,!is.na(toplot[])]
View(DataPlot)
toplot <- DataPlot[,grep("Y",colnames(DataPlot))]
View(toplot)
toplot <- DataPlot[,grep("Y+CountryName",colnames(DataPlot))]
View(toplot)
toplot <- DataPlot[,grep("Y|CountryName",colnames(DataPlot))]
View(toplot)
toplot <- toplot[,!is.na(toplot[])]
toplot[]
sapply(toplot,1,!is.na(toplot[])
)
apply(toplot,1,!is.na(toplot[])
)
apply(toplot,1,!is.na(x)
)
apply(toplot,1,function(x){any(!is.na(x))})
apply(toplot,2,function(x){any(!is.na(x))})
dd<- data.frame(x=as.numeric(gsub("Y","",colnames(toplot))),
y = as.numeric(toplot))
dd <- melt(toplot,id.vars="CountryName")
View(dd)
toplot <- DataPlot[,grep("Y|CountryName",colnames(DataPlot))]
View(toplot)
dd <- melt(toplot,id.vars="CountryName")
dd
dd$variable <- as.numeric(gsub("Y","",dd$variable))
View(dd)
dd <- subset(dd,!is.na(value))
View(dd)
paste0("Y|",DSli)
paste0("Y|",paste(DSli,sep="|"))
paste(DSli,sep="|")
paste(DSli,collapse="|")
grep(paste0("Y|",paste(DSli,collapse="|"))
toplot <- DataPlot[,grep(paste0("Y|",paste(DSli,collapse="|")),colnames(DataPlot))]
paste0("Y|",paste(DSli,collapse="|"))
grep(paste0("Y|",paste(DSli,collapse="|")),colnames(DataPlot))
DataPlot[,grep(paste0("Y|",paste(DSli,collapse="|")),colnames(DataPlot))]
toplot <- DataPlot[,grep(paste0("Y|",paste(DSli,collapse="|")),colnames(DataPlot))]
dd <- melt(toplot,id.vars=DSli)
dd
dd$variable <- as.numeric(gsub("Y","",dd$variable))
dd <- subset(dd,!is.na(value))
View(dd)
View(dd)
eval(parse(text=textas))
toplot <- DataPlot[,grep(paste0("Y|",paste(DSli,collapse="|")),colnames(DataPlot))]
dd <- melt(toplot,id.vars=DSli)
dd$variable <- as.numeric(gsub("Y","",dd$variable))
dd <- subset(dd,!is.na(value))
dd
ggplot(data=dd,aes(x=variable,y=value))+geom_line(colour="#FAA537")+theme_bw()+xlab('Year')+ylab("")
runApp()
runApp()
