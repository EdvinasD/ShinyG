class(obj[1])
class(obj[2])
class(obj[1:2])
class(obj)
summery(obj)
summary(obj)
obj <- list(g = list(a=4,f=5,g=5),h = list(a=44,f=54,g=54))
class(obj) <- "mysubclass"
class(obj[1])
class(obj[2])
class(obj[1:2])
class(obj)
obj <- list(g = list(a=4,f=5,g=5),h = 5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[2])
class(obj[1:2])
class(obj)
obj <- list(list(a=4,f=5,g=5),5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[2])
class(obj[1:2])
class(obj)
obj <- list(list(a=4,f=5,g=5),5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[[2])
class(obj[1:2])
class(obj)
obj <- list(list(a=4,f=5,g=5),5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[[2]])
class(obj[1:2])
class(obj)
obj <- list(list(a=4,f=5,g=5),5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[[2]])
class(obj[[1:2]])
class(obj)
obj <- list(list(a=4,f=5,g=5),5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[[2]])
class(obj[2])
class(obj)
obj <- list(f <-list(a=4,f=5,g=5),h <- 5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[[2]])
class(obj[2])
class(obj)
obj <- list(f <-list(a=4,f=5,g=5),h <- 5)
class(obj) <- "mysubclass"
class(obj[1])
class(obj[h])
class(obj[2])
class(obj)
obj <- list(f <-list(a=4,f=5,g=5),h <- 5)
obj
load("C:/Users/edvinas.drevinskas/Desktop/fx.Rdata")
library("forecast")
library("reshape2")
library("ggplot2")
Auto.Data <- function(dat,h,maxp=8,maxq=8,maxd=2,plots=F,noMean=F,text=F,drift=T){
if(text){
cat("+----------------------------------------------+","\n")
cat("|         Data Fill Using auto.arima           |","\n")
cat("+----------------------------------------------+","\n")
cat("+----------------------------------------------+","\n")
}
m.vars <- names(dat)
dat <- cbind(dat,timeA=c(1:dim(dat)[1]))
dat <- merge(dat,data.frame(timeA=1:(dim(dat)[1]+h)),by="timeA",all=T)
dat <- melt(dat,id.vars="timeA"  , measure.vars = m.vars)
dat.s <- ddply(dat,~variable,function(z){
if(text){
cat(paste0("|  Variable: ",
as.character(unique(z$variable)),
paste0(rep(" ",32-nchar(as.character(unique(z$variable)))),collapse=""),
"  |",collapse=""),"\n")
}
# Spline part
if(any(is.na(z$value))){
x <- z$value
x.length <- length(x)
x.notna <- which(!is.na(x))
x.first <- min(x.notna)
x.last <- max(x.notna)
x <- x[c(x.first : x.last)]
if(any(is.na(x))){
time <- c(x.first : x.last)
# uzpildomos trukstamos reiksmes splainu pagalba
s <- splinefun(time, x, method = "monoH.FC")
x <- s(time)
x <- c(rep(NA, x.first-1), x, rep(NA, x.length-x.last))
z$value <- x
if(text){
cat("|     spline was used                          |","\n")
}
}
}
# Auto arima part End
if(any(is.na(z$value))){
z.notna <-  which(!is.na(z$value))
modelE <- auto.arima(z$value[z.notna],max.p=maxp,max.q=maxq,max.d=maxd)
if(sum(modelE$arma)<4)
modelE <- Arima(z$value[z.notna],order=modelE$arma[c(1,6,2)],include.const = T,include.drift = drift)
if((max(z$timeA)-max(z.notna))!=0){
if(modelE$arma[1]==0 & modelE$arma[2]==0  & noMean==T){
if(modelE$arma[6]==0){
modelE <- Arima(z$value[z.notna],order = c(1, 0, 1),include.drift = drift)
}else{
modelE <- Arima(z$value[z.notna],order = c(1, 1, 1),include.drift = drift)
}
if(text){
cat("|     end method - ",
paste("ARIMA(",paste(modelE$arma[c(1,6,2)],collapse=" "),")"),
", no int    |",
"\n")
}
}else{
if(text){
cat("|     end method - ",
paste("ARIMA(",paste(modelE$arma[c(1,6,2)],collapse=" "),")"),
"            |",
"\n")
}
}
# print(modelE$coef)
z$value[c(max((z.notna+1)):max(z$timeA))] <- forecast(modelE,h=(max(z$timeA)-max(z.notna)))$mean
}
}
# Auto arima part Start
if(any(is.na(z$value))){
s <- rev(z$value)
s.notna <-  which(!is.na(s))
modelS <- auto.arima(s[s.notna],max.p=maxp,max.q=maxq,max.d=maxd)
if(sum(modelS$arma)<4)
modelS <- Arima(z$value[z.notna],order=modelS$arma[c(1,6,2)],include.const = T,include.drift =drift)
if((length(s)-max(s.notna))!=0){
if(modelS$arma[1]==0 & modelS$arma[2]==0  & noMean==T){
if(modelS$arma[6]==0){
modelS <- arima(s[s.notna],order = c(1, 0, 1),include.drift = drift)
}else{
modelS <- Arima(s[s.notna],order = c(1, 1, 1),include.drift = drift)
}
if(text){
cat("|     begin method - ",
paste("ARIMA(",paste(modelS$arma[c(1,6,2)],collapse=" "),")"),
", no int  |",
"\n")
}
}else{
if(text){
cat("|     begin method - ",
paste("ARIMA(",paste(modelS$arma[c(1,6,2)],collapse=" "),")"),
"          |",
"\n")
}
}
s[c(max((s.notna+1)):length(s))] <- forecast(modelS,h=(length(s)-max(s.notna)))$mean
z$value <- rev(s)}
}
if(text){
cat("+----------------------------------------------+","\n")
}
return(z)
})
if(plots){
suppressWarnings(
print(
ggplot(dat.s,aes(x=timeA,y=value))+geom_line(colour="#681B31")+facet_wrap(~variable,scale="free")+
theme_bw()+xlab("")+ylab("")+
geom_point(data=dat, colour="#004672")+
theme(strip.background = element_rect(fill="#99D3E8"))+
geom_point(data=dat.s[which(is.na(dat$value)),], colour="#E54B36")
)
)
}
dat.s <- dcast(dat.s,timeA~variable)
dat.s <- subset(dat.s,select=-timeA)
return(dat.s)
}
ddddd <- Auto.Data(fx,20,text=T,plots=T,noMean=T,drift=T)
library("plyr")
Auto.Data(fx,20,text=T,plots=T,noMean=T,drift=T)
wafox <-    c("#F8E03E","#A45E60","#541F0F","#CD8B34","#E7D2B7")
wajack <-   c("#AEA8A8","#CC9E02","#95796D","#AD6E45")
waroyal <-  c("#89B151","#F4DDBE","#715A38","#201A02")
wasteve <-  c("#01ABE9","#1B346C","#F54B1A","#E5C39E","#C3CED0")
wapicnic <- c("#8D9876","#CBB345","#609F80","#4B574D","#AF420A")
wapink <-   c("#F1BB7B","#FD6467","#5B1A18","#D67263")
waqual <-   c("#F3DF6C","#CEAB07","#D5D5D3","#24281A")
ShowColours(wafox)
ShowColours <- function(col){
pie(rep(1/length(col),length(col)),edges = length(col), labels = gsub("#","",col),col=col,main="Colours", border=NA)
}
ShowColours(wafox)
ShowColours(wajack)
ShowColours(waroyal)
ShowColours(wasteve)
ShowColours(wapicnic)
ShowColours(wapink)
ShowColours(waqual)
ShowColours <- function(col){
ShowColours(wafox)
ShowColours(wafox)
ShowColours(wajack)
ShowColours(wafox)
ShowColours(wajack)
ShowColours(waroyal)
ShowColours(wasteve)
ShowColours(wapicnic)
ShowColours(wapink)
3133938+2736796+45581300
wafox <-    c("#F8E03E","#A45E60","#541F0F","#CD8B34","#E7D2B7")
wajack <-   c("#AEA8A8","#CC9E02","#95796D","#AD6E45")
waroyal <-  c("#89B151","#F4DDBE","#715A38","#201A02")
wasteve <-  c("#01ABE9","#1B346C","#F54B1A","#E5C39E","#C3CED0")
wapicnic <- c("#8D9876","#CBB345","#609F80","#4B574D","#AF420A")
wapink <-   c("#F1BB7B","#FD6467","#5B1A18","#D67263")
waqual <-   c("#F3DF6C","#CEAB07","#D5D5D3","#24281A")
wamrk <-    c("#899DA4","#C93312","#FAEFD1","#DC863B")
wasam  <-   c("#798E87","#C27D38","#CCC591","#29211F")
waphone <-  c("#D8B70A","#02401B","#A2A475","#81A88D","#972D15")
wabath <-   c("#9A8822","#F5CDB4","#F8AFA8","#FDDDA0","#74A089")
wamendl <-  c("#E6A0C4","#C6CDF7","#D8A499","#7294D4")
wahunt  <-  c("#85D4E3","#F4B5BD","#9C964A","#CDC08C","#FAD77B")
wabalc  <-  c("#446455","#FDD262","#D3DDDC","#C7B19C")
ShowColours(wafox)
ShowColours <- function(col){
pie(rep(1/length(col),length(col)),edges = length(col), labels = gsub("#","",col),col=col,main="Colours", border=NA)
}
ShowColours(wafox)
ShowColours(wafox)
ShowColours(wajack)
ShowColours(waroyal)
ShowColours(wasteve)
ShowColours(wapicnic)
ShowColours(wapink)
ShowColours(waqual)
ShowColours(wamrk)
ShowColours(wasam)
ShowColours(waphone
)
ShowColours(wabath)
ShowColours(wamendl)
ShowColours(wahunt)
ShowColours(wabalc)
ShowColours(wapicnic)
ShowColours(wabalc)
ff <- cumsum(rnorm(x,50))
ff <- cumsum(rnorm(50))
plot(ff,type=="l")
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
ff <- cumsum(rnorm(50))
plot(ff,type="l")
x <- ff
data <- data.frame(x=1:length(x),y=x)
data
ggplot(data=data,aes(x=x,y=y))+geom_line()
library(ggplot2)
ggplot(data=data,aes(x=x,y=y))+geom_line()
ggplot(data=data,aes(x=x,y=y))+geom_line()+geom_area()
ggplot(data=data,aes(x=x,y=y))+geom_area()
data$co <- rainbow(50)
data$co
ggplot(data=data,aes(x=x,y=y,fill=co))+geom_area()
ggplot(data=data,aes(x=x,y=y,colour=co))+geom_area()
ggplot(data=data,aes(x=x,y=y,colour=co))+geom_area(colour=co)
ggplot(data=data,aes(x=x,y=y,colour=co))+geom_area(colour=co)
data$co
geom_area(colour=co)
ggplot(data=data,aes(x=x,y=y,colour=co))+geom_area(color=co)
ggplot(data=data,aes(x=x,y=y,colour=co))+geom_area(color=data$co)
ggplot(data=data,aes(x=x,y=y,colour=co))+geom_area(fill=data$co)
ggplot(data=data,aes(x=x,y=y))+geom_area(fill=data$co)
ggplot(data=data,aes(x=x,y=y))+geom_area(fill=data$co)
ggplot(data=data,aes(x=x,y=y))+geom_area()
ggplot(data=data,aes(x=x,y=y))+geom_area()+
scale_fill_manual(values = c('red', 'blue'))
ggplot(data=data,aes(x=x,y=y))+geom_area(position = "identity")+
scale_fill_manual(values = c('red', 'blue'))
data$co <- c("fas","dsa")
data$co
ggplot(data=data,aes(x=x,y=y,colour=co))+geom_area()+
scale_fill_manual(values = c('red', 'blue'))
ggplot(data=data,aes(x=x,y=y,fill=co))+geom_area()+
scale_fill_manual(values = c('red', 'blue'))
data[data$y<0]$co
data$y
data$y<0
data[data$y<0,]$co
data[data$y<0,]$co <- "fas"
data[data$y>0,]$co <- "das"
ggplot(data=data,aes(x=x,y=y,fill=co))+geom_area()+
scale_fill_manual(values = c('red', 'blue'))
co
ggplot(data=data,aes(x=x,y=y))+geom_area(aes(fill=y))+
scale_fill_manual(values = c('red', 'blue'))
ggplot(data=data,aes(x=x,y=y,fill=y))+geom_area()+
scale_fill_manual(values = c('red', 'blue'))
ggplot(data=data,aes(x=x,y=y,fill=co))+geom_area()+
scale_fill_manual(values = c('red', 'blue'))
ggplot(data=data,aes(x=x,y=y,fill=y))+geom_tile()+
scale_fill_manual(values = c('red', 'blue'))
ggplot(data=data,aes(x=x,y=y,fill=y))+geom_tile()
ggplot(data=data,aes(x=x,y=y,fill=y))+geom_area()
ggplot(data=data,aes(x=x,y=y,fill=y,group=co))+geom_area()
ggplot(data=data,aes(x=x,y=y,group=co))+geom_area()
ggplot(data=data,aes(x=x,y=y))+geom_area()
ggplot(data=data,aes(x=x,y=y))+geom_area(fill="red")
ggplot(data=data,aes(x=x,y=y))+geom_area(aes(fill=y))
ggplot(data=data,aes(x=x,y=y))+geom_area(aes(colour=y))
data$y
data
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area()
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area(aes(colour=y))
ggplot(data=data,aes(x=x,y=y))+
geom_histogram(aes(fill = ..x.. > 100),
binwidth = bw.SJ(df$val), colour = "black")
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area(aes(fill = ..y.. > 100))
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area(aes(fill = ..y.. > 0))
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area(aes(fill = ..y.. > 10))
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area(aes(fill = ..y.. > 5))
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area(aes(fill = ..y.. > 0))
?geom_area
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_area()
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_ribbon()
ff <- cumsum(rnorm(50))
plot(ff,type="l")
x <- ff
data <- data.frame(x=1:length(x),y=x)
data[data$y<0,]$co <- "fas"
data[data$y>0,]$co <- "das"
library(ggplot2)
ggplot(data=data,aes(x=x,y=y))+geom_line(aes(colour=y))+geom_ribbon()
+
geom_histogram(aes(fill = ..x.. > 100),
binwidth = bw.SJ(df$val), colour = "black") +
scale_fill_hue(h = c(115, 230)) +
geom_density(colour = "red", lwd = 1)
ff <- cumsum(rnorm(50))
plot(ff,type="l")
x <- ff
data <- data.frame(x=1:length(x),y=x)
data[data$y<0,]$co <- "fas"
data[data$y>0,]$co <- "das"
library(ggplot2)
ff <- cumsum(rnorm(50))
plot(ff,type="l")
x <- ff
data <- data.frame(x=1:length(x),y=x)
data[data$y<0,]$co <- "fas"
data[data$y>0,]$co <- "das"
ShowColours <- function(col){
pie(rep(1/length(col),length(col)),edges = length(col), labels = gsub("#","",col),col=col,main="Colours", border=NA)
}
colv <- c(`Total Households`="black",`1 Person`="#ECD078",`2 Persons`="#D95B43",
`3 Persons`="#C02942",`4 Persons`="#542437",`5 Persons`="#53777A",`6+ Persons`="#274C4F")
ShowColours(colv)
ShowColours(rainbow(5000))
ShowColours <- function(col){
pie(rep(1/length(col),length(col)),edges = length(col), labels = NULL,col=col,main="Colours", border=NA)
}
colv <- c(`1 Person`="#ECD078",`2 Persons`="#D95B43",
`3 Persons`="#C02942",`4 Persons`="#542437",`5 Persons`="#53777A",`6+ Persons`="#274C4F")
ShowColours(rainbow(50))
ShowColours <- function(col){
pie(rep(1/length(col),length(col)),edges = length(col), labels = "",col=col,main="Colours", border=NA)
}
colv <- c(`1 Person`="#ECD078",`2 Persons`="#D95B43",
`3 Persons`="#C02942",`4 Persons`="#542437",`5 Persons`="#53777A",`6+ Persons`="#274C4F")
ShowColours(rainbow(50))
ShowColours <- function(col){
pie(rep(1/length(col),length(col)),edges = length(col), labels = "",col=col,main="", border=NA)
}
colv <- c(`1 Person`="#ECD078",`2 Persons`="#D95B43",
`3 Persons`="#C02942",`4 Persons`="#542437",`5 Persons`="#53777A",`6+ Persons`="#274C4F")
ShowColours(rainbow(50))
ShowColours <- function(col){
pie(rep(1/length(col),length(col)),edges = length(col), labels = "",col=col,main="", border=NA)
}
ShowColours(rainbow(5000))
install.packages("colorspace")
library("colorspace")
install.packages("colorspace")
library("colorspace")
library(ggplot2)
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
?unit
??unit
if( i ==10) next
i= 5
if( i ==10) next
for( i in 1:10)
if( i ==5) next
rm(list=ls())
load("C:/Users/edvinas.drevinskas/Desktop/Povilas/testas.Rdata")
View(a)
emibase=function(){
cat("Loading EMI base package ...","\n")
load("K:\\GMID Research\\SM-route\\EMI base\\EMI base.Rdata",envir = .GlobalEnv)
cat("Succesfully loaded","\n")
}
emibas()
emibase()
matplotg(a)
library("reshape")
matplotg(a)
library("ggplot")
library("ggplot2")
library("gridExtra")
matplotg(a)
xframe <- a
#   xframe2=xframe
ec = c("#206779","#0078BF","#7C6D96","#BD4F5C","#E07A3F","#FDCF41","#57854E")
if(dim(xframe)[2]==1) ec="#FAA537"
if(dim(xframe)[2]==2) ec=c("#FAA537","#5F88A1")
if(dim(xframe)[2]==3) ec=c("#FAA537","#5F88A1","firebrick3")
if(dim(xframe)[2]==4) ec=c("#FAA537","#5F88A1","firebrick3","#57854E")
#   if(dim(xframe)[2]==5) ec=c("#FAA537","#5F88A1","firebrick3","#57854E","#00AED9")
#   if(dim(xframe)[2]==6) ec=c("#FAA537","#5F88A1","firebrick3","#57854E","#00AED9","#206779")
#
if(scale){
xframe=apply(xframe,2,scale)
}
if(is.null(names(xframe))){
xframe=data.frame(xframe)
}
xframe=xframe[!apply(xframe,2,function(x){all(is.na(x))})]
xframe=cbind(Index=1:dim(xframe)[1],xframe)
mx=melt(xframe,id.vars="Index")
ggplot(mx,aes(x=Index,y=value,group=variable,colour=variable))
g=ggplot(mx,aes(x=Index,y=value,group=variable,colour=variable))
!is.null(abline)
!is.null(fr)
is.null(fr)
g+geom_line()+theme_bw()+ylab("")+
xlab("")+ggtitle("")+theme(legend.position="bottom")+guides(col = guide_legend(nrow = 2))+
scale_colour_manual(values=colorRampPalette(ec)(dim(xframe)[2]-1))
g+geom_text(data=h,aes(label=variable,col=variable), size=3)
emibase=function(){
cat("Loading EMI base package ...","\n")
load("K:\\GMID Research\\SM-route\\EMI base\\EMI base.Rdata",envir = .GlobalEnv)
cat("Succesfully loaded","\n")
}
emibase()
matplotg(a)
runGitHub( "EdvinasD", "ShinyG")
library("shiny")
runGitHub( "EdvinasD", "ShinyG")
runGitHub("ShinyG","EdvinasD")
runGitHub("ShinyG","EdvinasD")
setwd("~/Graphical Visualisation/Shiny package/ShinyG")
library(shiny)
source("server.R")
source("ui.R")
runApp()
runGitHub("ShinyG","EdvinasD")
shiny::runGitHub('shiny_example', 'rstudio')
runGitHub("shiny_example", "rstudio", subdir = "inst/shinyapp/")
library(devtools) install_github("shiny","rstudio")
library(devtools) install_github("shiny","rstudio")
library(devtools) install_github("shiny","rstudio")
library(devtools)
install_github("shiny","rstudio")
library("shiny")
runGitHub("ShinyG","EdvinasD")
?runGitHub
runGitHub("shiny_example", "rstudio", subdir = "inst/shinyapp/")
sessionInfo()
